/* Using mobile first approach */
/* Defining color palette variables using pseudo class selector 'root' */
:root {
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #1b0760;
  --color-body: #918ca4;
  --color-body-darker: #5c5577;
  --color-border: #ccc;
  --border-radius: 30px;
}

/* 
  Universal rule 
  TODO: Learn more about box-sizing
*/
*,
*::after,
*::before {
  box-sizing: border-box;
}

/* Topography */
html {
  /* 62.5% of 16px = 10px: By default font-size of html element is 16px */
  font-size: 62.5%;
}

body {
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem;
  line-height: 1.5; /* 1.5 * current font-size */
  color: var(--color-body);
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem; /* Inter font already have some margin below and top of characters */
  line-height: 1.1;
}

h1 {
  font-size: 7rem; /* 1rem = 10px i.e. 62.5% of 16px (font size of html element)*/
}

h2 {
  font-size: 4rem; /* 1rem = 10px i.e. 62.5% of 16px (font size of html element)*/
}

h3 {
  font-size: 3rem; /* 1rem = 10px i.e. 62.5% of 16px (font size of html element)*/
}

p {
  margin-top: 0; /* let the heading decide the margin above the paragraph */
}

/* media query of screens larger than 1024px */
@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }
  h1 {
    font-size: 8rem;
  }
  h2 {
    font-size: 4rem;
  }
  h3 {
    font-size: 2.4rem;
  }
}

/* Links */

a {
  text-decoration: none;
}

.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem; /* 20px */
  font-weight: bold;
}

/* adding content dynamically using 'after' pseudo class */
.link-arrow::after {
  content: "-->"; /* TODO: comeback and replace with icon */
  margin-left: 5px;
  transition: margin 0.15s; /* margin should change in 0.15 seconds */
}

/* on hover, targeting content that is added dynamically */
.link-arrow:hover::after {
  margin-left: 10px;
}

/* media query for links component  */
@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/* Badges */

/* Structure */
.badge {
  border-radius: 2rem; /* 20px */
  font-size: 2rem;
  font-weight: 600;
  padding: 0.5rem 2rem;
  white-space: nowrap; /* whatever appears inside will be on the same line. */
}

/* 
  variations of badges
  using OOP # 2 i.e. separate structure from skin
  using BEM (Block, Element, Modifier naming convention)
    - separate element and modifier using --.
*/
.badge--primary {
  background: var(--color-primary);
  color: white;
}

.badge--secondary {
  background: var(--color-secondary);
  color: white;
}

.badge--small {
  font-size: 1.6rem;
  padding: 0.5rem 1.5rem;
}

/* media query for badge component */
@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/* List */
.list {
  list-style: none;
  padding-left: 0;
  color: var(--color-headings);
}

/* 
  variations of list
  using OOP # 2 i.e. separate structure from skin
  using BEM (Block, Element, Modifier naming convention)
    - separating block from its elements by using __
*/
.list--inline .list__item {
  display: inline-block;
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url(../images/tick.svg);
  padding-left: 3rem; /* by default tick image is off the screen (TODO: take a look why?) */
}

/* using nesting (more specific) */
.list--tick .list__item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

/* media query for lists components */
@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0;
  }
}

/* Icons */
.icon {
  width: 40px;
  height: 40px;
}

.icon--small {
  width: 30px;
  height: 30px;
}

/* Icons variation */
.icon--primary {
  fill: var(--color-primary);
}

.icon--white {
  fill: #fff;
}

.icon-container {
  /* this is NOT a variation or modifier of icon class */
  background: #f3f9fa;
  width: 64px; /* here absolute units is used for icons because their size does not change relative to screen or font size. */
  height: 64px;
  border-radius: 100%;
  display: inline-flex; /* span is an inline element, inline have not effect on CSS properties */
  justify-content: center; /* primary axis of flex */
  align-items: center; /* vertical axis of flex */
}

.icon-container--accent {
  background: var(--color-accent);
}

/* Buttons */
.btn {
  border-radius: 40px;
  border: 0;
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  margin: 1rem 0;
  outline: 0;
  padding: 2rem 3rem;
  text-transform: uppercase;
  text-align: center;
  white-space: nowrap;
}

/* size of icon inside a button */
.btn .icon {
  width: 2rem;
  height: 2rem;
  margin-right: 1rem;
  vertical-align: middle;
}

/* Button variations */
.btn--primary {
  background: var(--color-primary);
  color: #fff;
}

.btn--primary:hover {
  background: #3a8ffd;
}

.btn--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.btn--secondary:hover {
  background: #00c8eb;
}

.btn--accent {
  background: var(--color-accent);
  color: #fff;
}

.btn--accent:hover {
  background: #ec3000;
}

.btn--stretched {
  padding-left: 6rem;
  padding-right: 6rem;
}

/* by default browser sets the box-sizing of button elements to border-box */
.btn--block {
  width: 100%;
  display: inline-block; /* anchor elements are inline by default */
}

.btn--outline {
  background: #fff;
  color: var(--color-headings);
  border: 2px solid var(--color-headings);
}

.btn--outline:hover {
  background: var(--color-headings);
  color: #fff;
}

/* media query for buttons */
@media screen and (width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }
}

/* Inputs */
.input {
  padding: 1.5rem 3.5rem;
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);
  outline: 0; /* By default web browsers add outline for accessibility purpose */
  color: var(--color-headings);
  font-size: 2rem;
}
/* pseudo element to select placeholder text */
::placeholder {
  color: #cdcdd7;
}

/* Input Group */
.input-group {
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);

  /* div is an block level element, it takes all the space. */
  display: flex; /* now input component inside div becomes a flex item */
}

.input-group .input {
  border: 0; /* make border 0 of input field inside div of class input-group */
  flex-grow: 1; /* input field takes all the available space */
  padding: 1.5rem 2rem; /* reducing padding */
}

.input-group .btn {
  margin: 4px; /* used absolute unit 'px', because margin should be same regardless of font-size or viewport size */
}

/* media query for input field */
@media screen and (min-width: 1024px) {
  .input {
    font-size: 1.5rem;
  }
}

/* Cards */
.card {
  border-radius: 7px;
  box-shadow: 0 0 20px 10px #f3f3f3;
  /* letting the card stretch and take the all available space */
  overflow: hidden; /* fix background-color overflow problem */
}

.card__header,
.card__body {
  padding: 2rem 3rem;
}

.card--primary .card__header {
  background-color: var(
    --color-primary
  ); /* will cause overflow, because card__header will grow if we apply background color */
  color: #fff;
}

.card--secondary .card__header {
  background-color: var(
    --color-secondary
  ); /* will cause overflow, because card__header will grow if we apply background color */
  color: #fff;
}

.card--primary .badge--primary {
  background-color: #126de4;
}

/* rule for a secondary badge WITH a secondary card as a parent element */
.card--secondary .badge--secondary {
  background-color: #02cdf1;
}

/* Plans */

.plan {
  transition: transform 0.2s ease-out;
}
.plan__name {
  color: #fff;
  margin: 0;
  font-weight: 500;
  font-size: 2.4rem;
}

.plan__price {
  font-size: 6rem;
}

.plan__billing-cycle {
  font-size: 2.4rem;
  font-weight: 300;
  opacity: 0.8;
}

.plan__description {
  font-size: 2rem;
  font-weight: 300;
  letter-spacing: 1px;
  display: block; /* span is an in-line element, description should be on new line. */
}

.plan .list__item {
  margin-bottom: 2rem;
}

.plan--popular {
  transform: scale(1.1);
}

/* if we have element with a class plan--popular apply the following styles to element with class card__header (element with class card__header is child element) */
.plan--popular .card__header {
  position: relative;
}

.plan--popular .card__header::before {
  content: url("../images/popular.svg");
  width: 40px;
  display: inline-block; /* header is an inline element, width property wont work unless we set it is to inline-block*/
  position: absolute; /* now we can make parent or container a relatively position element (i.e. element with .card__header)*/
  top: -6px;
  right: 5%;
}

.plan:hover {
  transform: scale(1.05);
}

.plan--popular:hover {
  transform: scale(1.15);
}

/* media query for card component */
@media screen and (min-width: 1024px) {
  .plan__name {
    font-size: 1.4rem;
  }

  .plan__price {
    font-size: 5rem;
  }

  .plan__billing-cycle {
    font-size: 1.6rem;
  }
}

/* Media */
.media {
  display: flex;
}

.media__title {
  margin-top: 0;
}

.media__body {
  margin: 0 2rem;
}

.media__image {
  margin-top: 1rem;
}

/* Quotes */
.quote {
  font-size: 3rem;
  font-style: italic;
  color: var(--color-body-darker);
  line-height: 1.3;
}

/* adding opening quotation mark using pseudo element selector */
.quote__text::before {
  content: open-quote; /* open-quote is pre-defined in css */
}

/* adding closing quotation mark using pseudo element selector */
.quote__text::after {
  content: close-quote; /* close-quote is pre-defined in css */
}

.quote__author {
  font-size: 3rem;
  font-weight: 500;
  font-style: normal;
}

.quote__organization {
  color-scheme: var(--color-headings);
  opacity: 0.4;
  font-size: 2rem;
  font-style: normal;
}

.quote__line {
  position: relative;
  bottom: 10px;
}

/* media query for quote */
@media screen and (min-width: 1024px) {
  .quote {
    font-size: 2rem;
  }

  .quote__author {
    font-size: 2rem;
  }

  .quote__organization {
    font-size: 1.6rem;
  }
}

/* Grids */
.grid {
  display: grid;
}

/* for tablet and mobile screens (> 768px) */
@media screen and (min-width: 768px) {
  .grid--1x2 {
    /* grid-template-columns: 1fr 1fr; Take all the available space, divide by 2 and give value to each column */
    grid-template-columns: repeat(2, 1fr); /* same as above */
  }
}

/* for larger screens (> 1024px) */
@media screen and (min-width: 1024px) {
  .grid--1x3 {
    /* grid-template-columns: 1fr 1fr 1fr; Take all the available space, divide by 3 and give value to each column */
    grid-template-columns: repeat(3, 1fr); /* same as above */
  }
}

/* Testimonial */
.testimonial {
  padding: 3rem;
}

/* enabling relative positioning on image container */
.testimonial__image {
  position: relative;
}

/* targeting image that is directly inside container using > (direct child selector) */
.testimonial__image > img {
  width: 100%; /* 100% width of its container */
}

/* positioning icon using direct child selector */
.testimonial__image > .icon-container {
  position: absolute;
  top: 3rem;
  right: -32px; /* right offset of icon */
}

/* media query for tablets and larger screens */
@media screen and (min-width: 768px) {
  .testimonial .quote,
  .testimonial .quote__author {
    font-size: 2.4rem;
  }

  .testimonial .quote {
    margin-left: 6rem;
  }
}

/* Callout */
.callout {
  padding: 4rem;
  border-radius: 5px;
}

.callout--primary {
  background: var(--color-primary);
  color: #fff;
}

.callout__heading {
  color: #fff;
  margin-top: 0;
  font-size: 3rem;
}

/* align button vertically and horizontally to center */
.callout .btn {
  justify-self: center;
  align-self: center;
}

.callout__content {
  text-align: center;
}

@media screen and (min-width: 768px) {
  .callout .grid--1x2 {
    grid-template-columns: 1fr auto; /* allocate all the extra space to 1st column */
  }
  .callout__content {
    text-align: left;
  }

  .callout .btn {
    justify-self: start;
    margin: 0 2rem;
  }
}

/* Collapsibles */
.collapsible__header {
  display: flex;
  justify-content: space-between;
}

.collapsible__heading {
  margin-top: 0;
  font-size: 3rem;
}

.collapsible__chevron {
  transform: rotate(-90deg);
  transition: transform 0.3s;
}

.collapsible__content {
  /* display: none; */
  max-height: 0; /* This will call overflow and content will be visible */
  opacity: 0;
  overflow: hidden; /* to fix overflow issue caused by max-height */
  transition: all 0.3s;
}

.collapsible--expanded .collapsible__chevron {
  transform: rotate(0);
}

.collapsible--expanded .collapsible__content {
  /* display: block; */
  max-height: 100vh;
  opacity: 1;
}

/* blocks */
.block {
  --padding-vertical: 6rem;
  padding: var(--padding-vertical) 2rem;
  /* text-align: center also makes child components text center aligned so that is not a solution */
  /* text-align: center;  */
}

.block__header {
  text-align: center;
}

.block__heading {
  margin-top: 0;
}

.block--dark {
  background: #000;
  color: #7b858b;
}

.block--dark .block__heading {
  color: #fff;
}

.block--skewed-right {
  padding-bottom: calc(var(--padding-vertical) + 4rem);
  clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 80%);
}

.block--skewed-left {
  padding-bottom: calc(var(--padding-vertical) + 4rem);
  clip-path: polygon(0% 0%, 100% 0%, 100% 80%, 0% 100%);
}

/* defines max width of block content */
.container {
  max-width: 1140px;
  margin: 0 auto; /* equal horizontal margin */
}

/* Navigation bar */
.nav {
  background: #000;
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  padding: 0 1rem;
  align-items: center; /* align content to center around secondary (vertical) axis */
}

.nav__list {
  width: 100%;
  margin: 0;
}

.nav__item {
  padding: 0.5rem 2rem;
  border-bottom: 1px solid #222;
}

.nav__item > a {
  color: #d2d0db;
  transition: color 0.3s;
}

.nav__item > a:hover {
  color: #fff;
}

.nav__toggler {
  opacity: 0.5;
  transition: box-shadow 0.15s;
  cursor: pointer;
}

/* to avoid conflict, we use double class selector i.e. select an element who have both these classes */
.nav.collapsible--expanded .nav__toggler {
  opacity: 1;
  box-shadow: 0 0 0 3px #666;
  border-radius: 5px;
}

.nav__brand {
  transform: translateY(5px);
}

/* media query for screens that are wider than 768px */
@media screen and (min-width: 768px) {
  .nav__toggler {
    display: none;
  }

  .nav__list {
    width: auto;
    display: flex;
    font-size: 1.6rem;

    /* to make the navigation list always visible */
    max-height: 100%;
    opacity: 1;
  }

  .nav__item {
    border: 0;
  }
}

/* Hero */
.hero {
  clip-path: polygon(
    0% 0%,
    100% 0%,
    100% 90%,
    0% 100%
  ); /* overrides previously defined clip-path property */
}
.hero__tagline {
  font-size: #b9c3cf;
  letter-spacing: 1px;
  margin: 2rem 0 5rem;
}

.hero__image {
  width: 100%;
}

@media screen and (min-width: 768px) {
  .hero {
    padding-top: 0;
  }

  .hero__content {
    text-align: left;
    align-self: center; /* vertically align the contents of the grid item */
  }
}

/* Domain Block */
.block-domain .input-group {
  box-shadow: 0 0 30px 20px #e6ebee;
  border: 0;
  margin: 4rem auto;
  max-width: 670px;
}

.block-domain__prices {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 6rem); /* height of each row */
  font-size: 2rem;
  font-weight: 600;
  justify-items: center; /* Horizontal alignment */
  max-width: 700px; /* list will not grow above 700px */
  margin: 0 auto;
}

/* Media query for domain block */
@media screen and (min-width: 768px) {
  .block-domain__prices {
    grid-template-columns: repeat(
      auto-fit,
      minmax(10rem, 1fr)
    ); /* automatically create the no. of columns to fix the width, each column should be 100px*/
  }
}

/* Plans Block */
.block-plans .grid {
  gap: 8rem 4rem; /* gap between each card: row and column */
}

.block-plans .card {
  max-width: 500px; /* maximum width of each card */
  margin: 0 auto;
}

/* Features */

.feature {
  gap: 4rem 2rem;
  margin: 12rem 0; /* adding vertical margin */
}
.feature__heading {
  margin: 1rem 0;
}

/* selecting first feature */
.feature:first-of-type {
  margin-top: 6rem;
}

.feature__image {
  width: 100%;
}

@media screen and (min-width: 768px) {
  /* selecting all the even elements containing feature class */
  .feature:nth-of-type(even) .feature__content {
    order: 2;
  }
}
